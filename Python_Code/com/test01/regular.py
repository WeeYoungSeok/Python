# -*- coding:utf-8 -*-

# 정규식

import re
'''
Regular Expression

. : 문자 1개 의미
^ : 문자열의 시작을 의미
$ : 문자열의 마지막을 의미
[] : 문자 집합을 의미
| : or
() : 괄호 안 정규식 그룹

* : 0 or more(그 이상)
+ : 1 or more
? : 0 or 1
{n} : n번 반복
{n, m} : n번부터 m번 반복
{n, } : n번부터 무한대

'''
"""
r 문자열 표기법 (re 모듈의 확장 문법)
\w : [a-zA-Z0-9_] : a ~ z, A ~ Z, 0 ~ 9, _를 포함하는 모든 문자
\W : [^a-zA-Z-0-9_] : 위의 문자를 제외한 나머지 문자 (여기서 ^ : not)
\d : [0-9] : 0 ~ 9
\D : [^0-9] : 숫자를 제외한 나머지 문자
\s : [\t\n\r\f\v] : 공백문자
\S : [^\t\n\r\f\v] : 공백을 제외한 나머지 문자
\b : 단어의 시작과 끝의 빈 공백
\B : 단어의 시작과 끝이 아닌 빈 공백
\\ : \
\[n] : 지정된 n만큼 일치하는 문자열을 리턴 (n은 숫자)
\A : 문자열의 시작
\Z : 문자열의 끝

크롤링 할때 정규식이 편하다.
"""

str01 = '나의 이메일은 1a2kh.123@1a2kh.com123 입니다.'
match = re.search(r'[a-zA-Z.\d]*@[a-zA-Z.\d]*', str01)
# [\w] : 모든 문자들의 집합
# * : 그 모든 문자들이 몇개? 0 또는 그 이상 
# [\w]* : 모든 문자들을 몇개든 다 가져올거야
# [a-zA-Z.] : a ~ z, A ~ Z, .    까지
# [a-zA-Z.]* : a ~ z, A ~ Z, .   문자들을 0개또는 그 이상개 가져와라
print(match.group())




